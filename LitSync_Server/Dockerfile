# --- Этап 1: Сборщик зависимостей (Builder) ---
# Этот этап нужен только для того, чтобы скачать и собрать зависимости в "колеса" (wheels)
FROM python:3.12-slim AS builder

# Обновляем pip и устанавливаем wheel для сборки пакетов
RUN pip install --upgrade pip wheel

WORKDIR /app

# Копируем ТОЛЬКО файл с зависимостями.
# Docker закэширует этот слой. Пересборка зависимостей произойдет только если requirements.txt изменится.
COPY requirements.txt .

# Скачиваем и собираем все зависимости в виде .whl файлов в директорию /wheels.
# Это позволяет установить их на следующем этапе без доступа к интернету.
RUN pip wheel --no-cache-dir --wheel-dir /wheels -r requirements.txt


# --- Этап 2: Финальный образ (Final) ---
FROM python:3.12-slim

# Устанавливаем системные переменные
ENV PYTHONUNBUFFERED=1

# Создаем непривилегированного пользователя и группу для безопасности
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser

WORKDIR /app

# Копируем предсобранные "колеса" зависимостей с этапа 'builder'
COPY --from=builder /wheels /wheels

# Копируем файл с зависимостями
COPY requirements.txt .

# Устанавливаем зависимости из локальных файлов, а не из интернета.
# Это быстро, надежно и не требует сети.
RUN pip install --no-cache-dir --no-index --find-links=/wheels -r requirements.txt

# Копируем исходный код нашего приложения.
# Этот шаг выполняется после установки зависимостей, чтобы Docker не пересобирал
# зависимости каждый раз, когда мы меняем хоть одну строчку кода.
COPY --chown=appuser:appgroup . .

# Создаем директорию для отладочных логов и назначаем права
RUN mkdir -p _debug_requests && chown appuser:appgroup _debug_requests

# Переключаемся на непривилегированного пользователя
USER appuser

# Открываем порт
EXPOSE 6032

# _CHANGED_: КЛЮЧЕВОЕ ИЗМЕНЕНИЕ ДЛЯ СТАБИЛЬНОСТИ
# Увеличиваем количество рабочих процессов с 1 до 4.
# Это устраняет дедлок, когда один блокирующий API-запрос замораживал весь сервер.
# Теперь один воркер может ждать ответа от клиента, а другие свободны для обработки
# входящих сообщений от этого же клиента.
CMD ["gunicorn", "--bind", "0.0.0.0:6032", "--worker-class", "eventlet", "-w", "4", "wsgi:app"]